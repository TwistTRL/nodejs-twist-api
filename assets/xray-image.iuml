@startuml xray-image

' skinparam componentStyle uml2

title X-ray Image Data Flow

database "HOSPITAL DB" as db #fbe9e7

node "SYNAPSE COMPUTER" as synapse #LightSkyBlue {
    frame "Horos" as horos {
        interface "/Documents"
    }

    frame "10.7.46.53:7001" as imageAPI {
        component "nodejs-synapse-xray" as componentImageAPI
        interface "/dicom/update" as dicomUpdate
        interface "/dicom/:id" as dicomId
        interface "/sync/index" as syncIndex
        interface "/sync/:id" as syncId

        componentImageAPI -[hidden]down- dicomUpdate
        dicomUpdate -[hidden]down- dicomId
        dicomId -[hidden]down- syncIndex
        syncIndex -[hidden]down- syncId
    }

    horos -- imageAPI
}

node "TRLDSC2 SERVER" as trldsc2 #LightGreen {
    frame "trldsc2:7001" as trldsc2API {
        component "nodejs-trldsc2-xray" as trldsc2ImageAPI
        interface "/dicom" as dicom
        interface "/jpg" as jpg    
        trldsc2ImageAPI -[hidden]down- dicom
        dicom -[hidden]down- jpg     
    }
}


node "TWIST SERVER" as twist #LightGoldenRodYellow {
    frame "twist:3333" as twistAPI {
        component "nodejs-twist-api" as componentTwistAPI
        interface "/api/person-xray-image/:person_id" as apiPerson
        interface "/api/xray-image/:image_id" as apiImage
        componentTwistAPI -[hidden]down- apiPerson
        apiPerson -[hidden]down- apiImage
    }

    database "Redis Cache" as Redis #fbe9e7 {
    }

    twistAPI ~down~ Redis
}

database DWTST #fbe9e7 {
    frame dbCache {
        interface "xray-jpg" as xrayJpg
    }
}

package "FRONT END COMPUTERS" as frontEnd #Plum {
    frame "_" as imageFE {
        component "react-xray-image-example"
    }
}


synapse -[hidden]- trldsc2
trldsc2 -[hidden]- twist
twist -[hidden]- frontEnd
' DWTST -[hidden]- twist

db -down- horos
imageAPI -- trldsc2API
trldsc2API -- twistAPI
trldsc2API -up- dbCache
twistAPI -- imageFE

' note right of synapse : image storage
note right of trldsc2 : image storage

@enduml